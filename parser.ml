type token =
  | LAMBDA
  | TRUE
  | FALSE
  | IF
  | THEN
  | ELSE
  | SUCC
  | PRED
  | ISZERO
  | LET
  | LETREC
  | IN
  | BOOL
  | NAT
  | STRING
  | UNIT
  | UNITV
  | LCOR
  | RCOR
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | LIST
  | NIL
  | CONS
  | ISNIL
  | HEAD
  | TAIL
  | COMMA
  | SEMICOLON
  | DOT
  | EQ
  | COLON
  | ARROW
  | EOF
  | QM
  | CONCAT
  | ID of (string)
  | INTV of (int)
  | STRINGV of (string)
  | STRINGT of (string)

open Parsing;;
let _ = parse_error;;
# 3 "parser.mly"
  open Lambda;;
# 50 "parser.ml"
let yytransl_const = [|
  257 (* LAMBDA *);
  258 (* TRUE *);
  259 (* FALSE *);
  260 (* IF *);
  261 (* THEN *);
  262 (* ELSE *);
  263 (* SUCC *);
  264 (* PRED *);
  265 (* ISZERO *);
  266 (* LET *);
  267 (* LETREC *);
  268 (* IN *);
  269 (* BOOL *);
  270 (* NAT *);
  271 (* STRING *);
  272 (* UNIT *);
  273 (* UNITV *);
  274 (* LCOR *);
  275 (* RCOR *);
  276 (* LPAREN *);
  277 (* RPAREN *);
  278 (* LBRACKET *);
  279 (* RBRACKET *);
  280 (* LIST *);
  281 (* NIL *);
  282 (* CONS *);
  283 (* ISNIL *);
  284 (* HEAD *);
  285 (* TAIL *);
  286 (* COMMA *);
  287 (* SEMICOLON *);
  288 (* DOT *);
  289 (* EQ *);
  290 (* COLON *);
  291 (* ARROW *);
    0 (* EOF *);
  292 (* QM *);
  293 (* CONCAT *);
    0|]

let yytransl_block = [|
  294 (* ID *);
  295 (* INTV *);
  296 (* STRINGV *);
  297 (* STRINGT *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\006\000\
\006\000\006\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\008\000\008\000\010\000\010\000\
\009\000\009\000\005\000\005\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\012\000\012\000\014\000\
\014\000\013\000\013\000\000\000"

let yylen = "\002\000\
\004\000\002\000\001\000\003\000\001\000\006\000\006\000\006\000\
\008\000\001\000\003\000\001\000\002\000\002\000\002\000\003\000\
\002\000\003\000\006\000\005\000\005\000\005\000\004\000\003\000\
\003\000\001\000\003\000\003\000\001\000\001\000\001\000\001\000\
\001\000\001\000\003\000\003\000\000\000\001\000\003\000\005\000\
\001\000\003\000\001\000\003\000\003\000\003\000\001\000\001\000\
\001\000\001\000\003\000\003\000\004\000\000\000\001\000\003\000\
\005\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\029\000\030\000\000\000\000\000\000\000\
\000\000\000\000\000\000\034\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\033\000\000\000\032\000\
\060\000\000\000\000\000\000\000\000\000\026\000\000\000\010\000\
\000\000\031\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\038\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\027\000\
\000\000\000\000\035\000\036\000\047\000\048\000\049\000\050\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\018\000\000\000\000\000\000\000\000\000\024\000\
\025\000\000\000\000\000\000\000\000\000\000\000\000\000\042\000\
\000\000\000\000\000\000\000\000\000\000\000\000\055\000\000\000\
\023\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\
\000\000\000\000\000\000\000\000\046\000\045\000\000\000\000\000\
\051\000\052\000\000\000\044\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\040\000\000\000\059\000\
\053\000\000\000\000\000\000\000\000\000\057\000"

let yydgoto = "\002\000\
\025\000\026\000\027\000\028\000\100\000\029\000\030\000\043\000\
\044\000\045\000\078\000\101\000\102\000\103\000"

let yysindex = "\002\000\
\121\255\000\000\225\254\000\000\000\000\162\255\010\002\010\002\
\010\002\236\254\237\254\000\000\162\255\208\255\011\255\015\255\
\024\255\025\255\029\255\009\255\020\255\000\000\021\255\000\000\
\000\000\004\000\033\255\010\002\008\255\000\000\032\255\000\000\
\253\254\000\000\042\255\042\255\042\255\043\255\045\255\241\254\
\047\255\249\254\058\255\060\255\000\000\039\002\039\002\039\002\
\039\002\039\002\050\255\162\255\162\255\162\255\000\000\162\255\
\042\255\228\254\010\002\039\002\162\255\162\255\039\002\000\000\
\162\255\162\255\000\000\000\000\000\000\000\000\000\000\000\000\
\039\002\039\002\049\255\070\255\071\255\063\255\081\255\083\255\
\085\255\086\255\000\000\033\255\013\000\033\255\033\255\000\000\
\000\000\042\255\079\255\255\254\254\254\082\255\002\255\000\000\
\095\255\099\255\092\255\097\255\112\255\113\255\000\000\039\002\
\000\000\039\002\010\002\010\002\010\002\010\002\000\000\162\255\
\162\255\162\255\162\255\100\255\000\000\000\000\039\002\039\002\
\000\000\000\000\118\255\000\000\043\001\042\255\042\255\042\255\
\033\255\033\255\033\255\007\255\047\255\000\000\109\255\000\000\
\000\000\042\255\162\255\102\255\033\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\122\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\240\001\000\000\
\000\000\000\000\014\000\005\002\210\001\000\000\000\000\000\000\
\000\000\000\000\001\000\031\000\061\000\000\000\000\000\000\000\
\055\255\128\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\091\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\130\255\000\000\000\000\080\255\000\000\000\000\
\000\000\000\000\000\000\121\000\000\000\015\000\152\000\000\000\
\000\000\183\000\000\000\000\000\000\000\000\000\131\255\000\000\
\000\000\000\000\000\000\132\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\213\000\243\000\017\001\
\047\001\087\001\118\001\000\000\000\000\000\000\133\255\000\000\
\000\000\149\001\000\000\000\000\179\001\000\000"

let yygindex = "\000\000\
\000\000\105\000\250\255\000\000\234\255\009\000\000\000\000\000\
\078\000\051\000\000\000\000\000\048\000\034\000"

let yytablesize = 831
let yytable = "\033\000\
\013\000\061\000\001\000\055\000\113\000\064\000\040\000\042\000\
\031\000\114\000\088\000\089\000\111\000\003\000\004\000\035\000\
\036\000\037\000\139\000\038\000\039\000\056\000\066\000\077\000\
\079\000\080\000\081\000\082\000\046\000\056\000\014\000\116\000\
\047\000\056\000\056\000\056\000\057\000\091\000\056\000\058\000\
\094\000\048\000\049\000\056\000\059\000\084\000\050\000\086\000\
\051\000\087\000\097\000\098\000\052\000\053\000\092\000\093\000\
\031\000\031\000\095\000\042\000\015\000\069\000\070\000\071\000\
\072\000\060\000\073\000\090\000\074\000\056\000\075\000\031\000\
\076\000\058\000\031\000\062\000\031\000\010\000\063\000\065\000\
\067\000\123\000\068\000\124\000\010\000\083\000\031\000\104\000\
\099\000\105\000\017\000\010\000\031\000\031\000\031\000\031\000\
\135\000\106\000\043\000\107\000\043\000\108\000\043\000\109\000\
\110\000\129\000\130\000\131\000\132\000\043\000\112\000\043\000\
\043\000\117\000\115\000\125\000\126\000\127\000\128\000\118\000\
\028\000\003\000\004\000\005\000\006\000\119\000\120\000\007\000\
\008\000\009\000\010\000\011\000\141\000\138\000\121\000\122\000\
\137\000\012\000\140\000\133\000\013\000\099\000\014\000\096\000\
\037\000\015\000\016\000\017\000\018\000\019\000\041\000\011\000\
\054\000\039\000\058\000\056\000\020\000\085\000\021\000\022\000\
\023\000\024\000\003\000\004\000\005\000\006\000\134\000\136\000\
\007\000\008\000\009\000\010\000\011\000\142\000\000\000\000\000\
\000\000\000\000\012\000\000\000\000\000\013\000\016\000\014\000\
\000\000\000\000\015\000\016\000\017\000\018\000\019\000\000\000\
\000\000\000\000\000\000\000\000\000\000\020\000\000\000\021\000\
\022\000\032\000\024\000\000\000\000\000\000\000\000\000\000\000\
\003\000\004\000\005\000\006\000\020\000\000\000\007\000\008\000\
\009\000\010\000\011\000\000\000\000\000\000\000\000\000\000\000\
\012\000\000\000\000\000\013\000\000\000\014\000\000\000\000\000\
\015\000\016\000\017\000\018\000\019\000\000\000\000\000\000\000\
\000\000\000\000\021\000\020\000\000\000\021\000\022\000\041\000\
\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\013\000\013\000\000\000\013\000\013\000\000\000\
\000\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\
\022\000\013\000\000\000\000\000\013\000\013\000\013\000\013\000\
\000\000\000\000\000\000\000\000\000\000\000\000\013\000\013\000\
\014\000\014\000\054\000\014\000\014\000\013\000\013\000\013\000\
\013\000\013\000\014\000\054\000\003\000\004\000\007\000\014\000\
\000\000\000\000\014\000\014\000\014\000\014\000\000\000\000\000\
\000\000\000\000\000\000\000\000\014\000\014\000\015\000\015\000\
\000\000\015\000\015\000\014\000\014\000\014\000\014\000\014\000\
\015\000\000\000\000\000\000\000\000\000\015\000\000\000\000\000\
\015\000\015\000\015\000\015\000\000\000\000\000\006\000\000\000\
\000\000\000\000\015\000\015\000\017\000\017\000\000\000\017\000\
\017\000\015\000\015\000\015\000\015\000\015\000\017\000\000\000\
\000\000\000\000\000\000\017\000\000\000\000\000\017\000\017\000\
\017\000\017\000\000\000\000\000\000\000\008\000\000\000\000\000\
\017\000\017\000\028\000\028\000\000\000\028\000\028\000\017\000\
\017\000\017\000\017\000\017\000\028\000\000\000\000\000\000\000\
\000\000\028\000\000\000\000\000\028\000\028\000\028\000\028\000\
\000\000\000\000\000\000\000\000\019\000\000\000\028\000\028\000\
\028\000\011\000\011\000\000\000\011\000\011\000\028\000\028\000\
\028\000\028\000\000\000\011\000\000\000\000\000\000\000\000\000\
\011\000\000\000\000\000\011\000\011\000\011\000\011\000\000\000\
\000\000\000\000\009\000\000\000\000\000\011\000\011\000\011\000\
\016\000\016\000\000\000\016\000\016\000\011\000\011\000\011\000\
\011\000\000\000\016\000\000\000\000\000\000\000\000\000\016\000\
\000\000\000\000\016\000\016\000\016\000\016\000\000\000\000\000\
\000\000\012\000\000\000\000\000\016\000\016\000\020\000\020\000\
\000\000\020\000\020\000\016\000\016\000\016\000\016\000\016\000\
\020\000\000\000\000\000\000\000\000\000\020\000\000\000\000\000\
\020\000\020\000\020\000\020\000\000\000\000\000\000\000\010\000\
\000\000\000\000\020\000\020\000\021\000\021\000\000\000\021\000\
\021\000\020\000\020\000\020\000\020\000\020\000\021\000\000\000\
\000\000\000\000\000\000\021\000\005\000\000\000\021\000\021\000\
\021\000\021\000\000\000\000\000\000\000\000\000\000\000\000\000\
\021\000\021\000\022\000\022\000\000\000\022\000\022\000\021\000\
\021\000\021\000\021\000\021\000\022\000\000\000\000\000\000\000\
\000\000\022\000\000\000\000\000\022\000\022\000\022\000\022\000\
\000\000\000\000\000\000\000\000\004\000\005\000\022\000\022\000\
\007\000\007\000\000\000\007\000\007\000\022\000\022\000\022\000\
\022\000\022\000\007\000\012\000\000\000\000\000\013\000\007\000\
\014\000\000\000\007\000\007\000\007\000\007\000\000\000\000\000\
\000\000\000\000\058\000\000\000\007\000\007\000\007\000\000\000\
\021\000\022\000\034\000\024\000\007\000\007\000\007\000\007\000\
\006\000\006\000\000\000\006\000\006\000\000\000\000\000\000\000\
\000\000\000\000\006\000\000\000\000\000\000\000\000\000\006\000\
\000\000\000\000\006\000\006\000\006\000\006\000\000\000\000\000\
\000\000\000\000\000\000\000\000\006\000\006\000\006\000\008\000\
\008\000\000\000\008\000\008\000\006\000\006\000\006\000\006\000\
\000\000\008\000\000\000\000\000\000\000\000\000\008\000\000\000\
\000\000\008\000\008\000\008\000\008\000\000\000\000\000\000\000\
\000\000\000\000\000\000\008\000\008\000\008\000\019\000\019\000\
\000\000\019\000\019\000\008\000\008\000\008\000\008\000\000\000\
\019\000\000\000\000\000\000\000\000\000\019\000\000\000\000\000\
\019\000\019\000\019\000\019\000\000\000\000\000\000\000\000\000\
\000\000\000\000\019\000\019\000\009\000\009\000\000\000\009\000\
\009\000\019\000\019\000\019\000\019\000\019\000\009\000\000\000\
\000\000\000\000\000\000\009\000\000\000\000\000\009\000\009\000\
\009\000\009\000\000\000\000\000\000\000\000\000\000\000\000\000\
\009\000\009\000\009\000\012\000\012\000\000\000\012\000\012\000\
\009\000\009\000\009\000\009\000\000\000\012\000\000\000\000\000\
\000\000\000\000\012\000\000\000\000\000\012\000\012\000\012\000\
\012\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\
\012\000\031\000\031\000\000\000\000\000\000\000\000\000\012\000\
\012\000\012\000\012\000\000\000\000\000\000\000\000\000\000\000\
\031\000\000\000\000\000\031\000\000\000\031\000\000\000\000\000\
\000\000\005\000\005\000\004\000\005\000\000\000\010\000\031\000\
\005\000\000\000\000\000\000\000\010\000\031\000\031\000\031\000\
\031\000\005\000\012\000\005\000\000\000\013\000\000\000\014\000\
\000\000\000\000\005\000\005\000\005\000\000\000\000\000\000\000\
\000\000\005\000\000\000\000\000\000\000\000\000\000\000\021\000\
\022\000\034\000\024\000\069\000\070\000\071\000\072\000\000\000\
\073\000\000\000\074\000\000\000\075\000\000\000\076\000"

let yycheck = "\006\000\
\000\000\005\001\001\000\000\000\006\001\021\001\013\000\014\000\
\040\001\012\001\039\001\040\001\000\000\000\000\000\000\007\000\
\008\000\009\000\012\001\040\001\040\001\037\001\030\001\046\000\
\047\000\048\000\049\000\050\000\018\001\037\001\000\000\030\001\
\018\001\037\001\037\001\037\001\028\000\060\000\037\001\032\001\
\063\000\018\001\018\001\037\001\037\001\052\000\018\001\054\000\
\040\001\056\000\073\000\074\000\033\001\033\001\061\000\062\000\
\002\001\003\001\065\000\066\000\000\000\013\001\014\001\015\001\
\016\001\034\001\018\001\059\000\020\001\037\001\022\001\017\001\
\024\001\032\001\020\001\033\001\022\001\023\001\034\001\033\001\
\023\001\104\000\023\001\106\000\030\001\036\001\032\001\018\001\
\040\001\019\001\000\000\037\001\038\001\039\001\040\001\041\001\
\119\000\035\001\019\001\019\001\021\001\019\001\023\001\019\001\
\019\001\112\000\113\000\114\000\115\000\030\001\032\001\032\001\
\033\001\019\001\033\001\107\000\108\000\109\000\110\000\021\001\
\000\000\001\001\002\001\003\001\004\001\034\001\030\001\007\001\
\008\001\009\001\010\001\011\001\139\000\125\000\023\001\023\001\
\019\001\017\001\030\001\040\001\020\001\040\001\022\001\066\000\
\023\001\025\001\026\001\027\001\028\001\029\001\023\001\000\000\
\023\001\023\001\023\001\023\001\036\001\053\000\038\001\039\001\
\040\001\041\001\001\001\002\001\003\001\004\001\116\000\120\000\
\007\001\008\001\009\001\010\001\011\001\140\000\255\255\255\255\
\255\255\255\255\017\001\255\255\255\255\020\001\000\000\022\001\
\255\255\255\255\025\001\026\001\027\001\028\001\029\001\255\255\
\255\255\255\255\255\255\255\255\255\255\036\001\255\255\038\001\
\039\001\040\001\041\001\255\255\255\255\255\255\255\255\255\255\
\001\001\002\001\003\001\004\001\000\000\255\255\007\001\008\001\
\009\001\010\001\011\001\255\255\255\255\255\255\255\255\255\255\
\017\001\255\255\255\255\020\001\255\255\022\001\255\255\255\255\
\025\001\026\001\027\001\028\001\029\001\255\255\255\255\255\255\
\255\255\255\255\000\000\036\001\255\255\038\001\039\001\040\001\
\041\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\003\001\255\255\005\001\006\001\255\255\
\255\255\255\255\255\255\255\255\012\001\255\255\255\255\255\255\
\000\000\017\001\255\255\255\255\020\001\021\001\022\001\023\001\
\255\255\255\255\255\255\255\255\255\255\255\255\030\001\031\001\
\002\001\003\001\031\001\005\001\006\001\037\001\038\001\039\001\
\040\001\041\001\012\001\031\001\031\001\031\001\000\000\017\001\
\255\255\255\255\020\001\021\001\022\001\023\001\255\255\255\255\
\255\255\255\255\255\255\255\255\030\001\031\001\002\001\003\001\
\255\255\005\001\006\001\037\001\038\001\039\001\040\001\041\001\
\012\001\255\255\255\255\255\255\255\255\017\001\255\255\255\255\
\020\001\021\001\022\001\023\001\255\255\255\255\000\000\255\255\
\255\255\255\255\030\001\031\001\002\001\003\001\255\255\005\001\
\006\001\037\001\038\001\039\001\040\001\041\001\012\001\255\255\
\255\255\255\255\255\255\017\001\255\255\255\255\020\001\021\001\
\022\001\023\001\255\255\255\255\255\255\000\000\255\255\255\255\
\030\001\031\001\002\001\003\001\255\255\005\001\006\001\037\001\
\038\001\039\001\040\001\041\001\012\001\255\255\255\255\255\255\
\255\255\017\001\255\255\255\255\020\001\021\001\022\001\023\001\
\255\255\255\255\255\255\255\255\000\000\255\255\030\001\031\001\
\032\001\002\001\003\001\255\255\005\001\006\001\038\001\039\001\
\040\001\041\001\255\255\012\001\255\255\255\255\255\255\255\255\
\017\001\255\255\255\255\020\001\021\001\022\001\023\001\255\255\
\255\255\255\255\000\000\255\255\255\255\030\001\031\001\032\001\
\002\001\003\001\255\255\005\001\006\001\038\001\039\001\040\001\
\041\001\255\255\012\001\255\255\255\255\255\255\255\255\017\001\
\255\255\255\255\020\001\021\001\022\001\023\001\255\255\255\255\
\255\255\000\000\255\255\255\255\030\001\031\001\002\001\003\001\
\255\255\005\001\006\001\037\001\038\001\039\001\040\001\041\001\
\012\001\255\255\255\255\255\255\255\255\017\001\255\255\255\255\
\020\001\021\001\022\001\023\001\255\255\255\255\255\255\000\000\
\255\255\255\255\030\001\031\001\002\001\003\001\255\255\005\001\
\006\001\037\001\038\001\039\001\040\001\041\001\012\001\255\255\
\255\255\255\255\255\255\017\001\000\000\255\255\020\001\021\001\
\022\001\023\001\255\255\255\255\255\255\255\255\255\255\255\255\
\030\001\031\001\002\001\003\001\255\255\005\001\006\001\037\001\
\038\001\039\001\040\001\041\001\012\001\255\255\255\255\255\255\
\255\255\017\001\255\255\255\255\020\001\021\001\022\001\023\001\
\255\255\255\255\255\255\255\255\002\001\003\001\030\001\031\001\
\002\001\003\001\255\255\005\001\006\001\037\001\038\001\039\001\
\040\001\041\001\012\001\017\001\255\255\255\255\020\001\017\001\
\022\001\255\255\020\001\021\001\022\001\023\001\255\255\255\255\
\255\255\255\255\032\001\255\255\030\001\031\001\032\001\255\255\
\038\001\039\001\040\001\041\001\038\001\039\001\040\001\041\001\
\002\001\003\001\255\255\005\001\006\001\255\255\255\255\255\255\
\255\255\255\255\012\001\255\255\255\255\255\255\255\255\017\001\
\255\255\255\255\020\001\021\001\022\001\023\001\255\255\255\255\
\255\255\255\255\255\255\255\255\030\001\031\001\032\001\002\001\
\003\001\255\255\005\001\006\001\038\001\039\001\040\001\041\001\
\255\255\012\001\255\255\255\255\255\255\255\255\017\001\255\255\
\255\255\020\001\021\001\022\001\023\001\255\255\255\255\255\255\
\255\255\255\255\255\255\030\001\031\001\032\001\002\001\003\001\
\255\255\005\001\006\001\038\001\039\001\040\001\041\001\255\255\
\012\001\255\255\255\255\255\255\255\255\017\001\255\255\255\255\
\020\001\021\001\022\001\023\001\255\255\255\255\255\255\255\255\
\255\255\255\255\030\001\031\001\002\001\003\001\255\255\005\001\
\006\001\037\001\038\001\039\001\040\001\041\001\012\001\255\255\
\255\255\255\255\255\255\017\001\255\255\255\255\020\001\021\001\
\022\001\023\001\255\255\255\255\255\255\255\255\255\255\255\255\
\030\001\031\001\032\001\002\001\003\001\255\255\005\001\006\001\
\038\001\039\001\040\001\041\001\255\255\012\001\255\255\255\255\
\255\255\255\255\017\001\255\255\255\255\020\001\021\001\022\001\
\023\001\255\255\255\255\255\255\255\255\255\255\255\255\030\001\
\031\001\002\001\003\001\255\255\255\255\255\255\255\255\038\001\
\039\001\040\001\041\001\255\255\255\255\255\255\255\255\255\255\
\017\001\255\255\255\255\020\001\255\255\022\001\255\255\255\255\
\255\255\005\001\006\001\002\001\003\001\255\255\031\001\032\001\
\012\001\255\255\255\255\255\255\037\001\038\001\039\001\040\001\
\041\001\021\001\017\001\023\001\255\255\020\001\255\255\022\001\
\255\255\255\255\030\001\031\001\032\001\255\255\255\255\255\255\
\255\255\037\001\255\255\255\255\255\255\255\255\255\255\038\001\
\039\001\040\001\041\001\013\001\014\001\015\001\016\001\255\255\
\018\001\255\255\020\001\255\255\022\001\255\255\024\001"

let yynames_const = "\
  LAMBDA\000\
  TRUE\000\
  FALSE\000\
  IF\000\
  THEN\000\
  ELSE\000\
  SUCC\000\
  PRED\000\
  ISZERO\000\
  LET\000\
  LETREC\000\
  IN\000\
  BOOL\000\
  NAT\000\
  STRING\000\
  UNIT\000\
  UNITV\000\
  LCOR\000\
  RCOR\000\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  LIST\000\
  NIL\000\
  CONS\000\
  ISNIL\000\
  HEAD\000\
  TAIL\000\
  COMMA\000\
  SEMICOLON\000\
  DOT\000\
  EQ\000\
  COLON\000\
  ARROW\000\
  EOF\000\
  QM\000\
  CONCAT\000\
  "

let yynames_block = "\
  ID\000\
  INTV\000\
  STRINGV\000\
  STRINGT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'termS) in
    Obj.repr(
# 59 "parser.mly"
      ( Bind (_1, _3))
# 456 "parser.ml"
               : Lambda.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'termS) in
    Obj.repr(
# 61 "parser.mly"
      ( Eval _1 )
# 463 "parser.ml"
               : Lambda.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 65 "parser.mly"
       ( _1 )
# 470 "parser.ml"
               : 'termS))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'termS) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 67 "parser.mly"
      (TmApp(TmAbs("_",TyUnit, _3), _1))
# 478 "parser.ml"
               : 'termS))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'appTerm) in
    Obj.repr(
# 72 "parser.mly"
      ( _1 )
# 485 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 74 "parser.mly"
      ( TmIf (_2, _4, _6) )
# 494 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 76 "parser.mly"
      ( TmAbs (_2, _4, _6) )
# 503 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 78 "parser.mly"
      ( TmLetIn (_2, _4, _6) )
# 512 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'ty) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 80 "parser.mly"
    ( TmLetIn (_2, TmFix (TmAbs (_2, _4, _6)), _8) )
# 522 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 82 "parser.mly"
      ( TmString _1 )
# 529 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 84 "parser.mly"
      ( TmConcat (_1, _3) )
# 537 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 93 "parser.mly"
      ( _1 )
# 544 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 95 "parser.mly"
      ( TmSucc _2 )
# 551 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 97 "parser.mly"
      ( TmPred _2 )
# 558 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 99 "parser.mly"
      ( TmIsZero _2 )
# 565 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 101 "parser.mly"
      ( TmConcat (_1, _3) )
# 573 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'appTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 103 "parser.mly"
      ( TmApp (_1, _2) )
# 581 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 105 "parser.mly"
      ( TmString _2 )
# 588 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'pathTerm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 107 "parser.mly"
     ( TmCons (_3,_5,_6) )
# 597 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 109 "parser.mly"
     ( TmIsNil (_3,_5) )
# 605 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 111 "parser.mly"
     ( TmHead (_3,_5) )
# 613 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 113 "parser.mly"
     ( TmTail (_3,_5) )
# 621 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ty) in
    Obj.repr(
# 115 "parser.mly"
     ( TmNil (_3) )
# 628 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 121 "parser.mly"
      ( TmProjection (_1, (string_of_int _3)))
# 636 "parser.ml"
               : 'pathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 124 "parser.mly"
      ( TmProjection (_1,_3))
# 644 "parser.ml"
               : 'pathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 127 "parser.mly"
      ( _1 )
# 651 "parser.ml"
               : 'pathTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 132 "parser.mly"
      ( _2 )
# 658 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 134 "parser.mly"
      ( _3 )
# 666 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 136 "parser.mly"
      (TmTrue)
# 672 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 138 "parser.mly"
      ( TmFalse )
# 678 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 140 "parser.mly"
      ( TmVar _1 )
# 685 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 142 "parser.mly"
      (TmString _1)
# 692 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 144 "parser.mly"
      ( let rec f = function
            0 -> TmZero
          | n -> TmSucc (f (n-1))
        in f _1 )
# 702 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 149 "parser.mly"
      ( TmUnit )
# 708 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'recordTM) in
    Obj.repr(
# 151 "parser.mly"
     (TmRecord _2)
# 715 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tuplesTM) in
    Obj.repr(
# 153 "parser.mly"
     ( TmTuple _2 )
# 722 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 157 "parser.mly"
              ( [] )
# 728 "parser.ml"
               : 'recordTM))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'noemptyrecordTM) in
    Obj.repr(
# 158 "parser.mly"
                    ( _1 )
# 735 "parser.ml"
               : 'recordTM))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 162 "parser.mly"
                    ([_1,_3])
# 743 "parser.ml"
               : 'noemptyrecordTM))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'noemptyrecordTM) in
    Obj.repr(
# 163 "parser.mly"
                                          ((_1,_3)::_5)
# 752 "parser.ml"
               : 'noemptyrecordTM))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 168 "parser.mly"
          ( [_1] )
# 759 "parser.ml"
               : 'tuplesTM))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tuplesTM) in
    Obj.repr(
# 169 "parser.mly"
                         ( _1::_3 )
# 767 "parser.ml"
               : 'tuplesTM))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTy) in
    Obj.repr(
# 174 "parser.mly"
      ( _1 )
# 774 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'atomicTy) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 176 "parser.mly"
      ( TyArr (_1, _3) )
# 782 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ty) in
    Obj.repr(
# 180 "parser.mly"
      ( _2 )
# 789 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ty) in
    Obj.repr(
# 182 "parser.mly"
      ( _2 )
# 796 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 184 "parser.mly"
      ( TyBool )
# 802 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 186 "parser.mly"
      ( TyNat )
# 808 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 188 "parser.mly"
      ( TyString )
# 814 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 190 "parser.mly"
      ( TyUnit )
# 820 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'recordTY) in
    Obj.repr(
# 192 "parser.mly"
      ( TyRecord _2 )
# 827 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tuplesTY) in
    Obj.repr(
# 194 "parser.mly"
      ( TyTuple _2 )
# 834 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ty) in
    Obj.repr(
# 196 "parser.mly"
      ( TyList _3 )
# 841 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 200 "parser.mly"
           ( [] )
# 847 "parser.ml"
               : 'recordTY))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'noemptyrecordTY) in
    Obj.repr(
# 201 "parser.mly"
                    ( _1 )
# 854 "parser.ml"
               : 'recordTY))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 204 "parser.mly"
                     ([_1,_3])
# 862 "parser.ml"
               : 'noemptyrecordTY))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'noemptyrecordTY) in
    Obj.repr(
# 205 "parser.mly"
                                           ((_1,_3)::_5)
# 871 "parser.ml"
               : 'noemptyrecordTY))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 208 "parser.mly"
       ( [_1] )
# 878 "parser.ml"
               : 'tuplesTY))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tuplesTY) in
    Obj.repr(
# 209 "parser.mly"
                      ( _1::_3 )
# 886 "parser.ml"
               : 'tuplesTY))
(* Entry s *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let s (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Lambda.command)
